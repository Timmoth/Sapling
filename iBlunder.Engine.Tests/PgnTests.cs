using FluentAssertions;
using iBlunder.Engine.Pgn;

namespace iBlunder.Engine.Tests;

public class PgnTests
{
    [Theory]
    [InlineData(0, "a1")]
    [InlineData(1, "b1")]
    [InlineData(2, "c1")]
    [InlineData(3, "d1")]
    [InlineData(4, "e1")]
    [InlineData(5, "f1")]
    [InlineData(6, "g1")]
    [InlineData(7, "h1")]
    [InlineData(8, "a2")]
    [InlineData(9, "b2")]
    [InlineData(10, "c2")]
    [InlineData(11, "d2")]
    [InlineData(12, "e2")]
    [InlineData(13, "f2")]
    [InlineData(14, "g2")]
    [InlineData(15, "h2")]
    [InlineData(16, "a3")]
    [InlineData(17, "b3")]
    [InlineData(18, "c3")]
    [InlineData(19, "d3")]
    [InlineData(20, "e3")]
    [InlineData(21, "f3")]
    [InlineData(22, "g3")]
    [InlineData(23, "h3")]
    [InlineData(24, "a4")]
    [InlineData(25, "b4")]
    [InlineData(26, "c4")]
    [InlineData(27, "d4")]
    [InlineData(28, "e4")]
    [InlineData(29, "f4")]
    [InlineData(30, "g4")]
    [InlineData(31, "h4")]
    [InlineData(32, "a5")]
    [InlineData(33, "b5")]
    [InlineData(34, "c5")]
    [InlineData(35, "d5")]
    [InlineData(36, "e5")]
    [InlineData(37, "f5")]
    [InlineData(38, "g5")]
    [InlineData(39, "h5")]
    [InlineData(40, "a6")]
    [InlineData(41, "b6")]
    [InlineData(42, "c6")]
    [InlineData(43, "d6")]
    [InlineData(44, "e6")]
    [InlineData(45, "f6")]
    [InlineData(46, "g6")]
    [InlineData(47, "h6")]
    [InlineData(48, "a7")]
    [InlineData(49, "b7")]
    [InlineData(50, "c7")]
    [InlineData(51, "d7")]
    [InlineData(52, "e7")]
    [InlineData(53, "f7")]
    [InlineData(54, "g7")]
    [InlineData(55, "h7")]
    [InlineData(56, "a8")]
    [InlineData(57, "b8")]
    [InlineData(58, "c8")]
    [InlineData(59, "d8")]
    [InlineData(60, "e8")]
    [InlineData(61, "f8")]
    [InlineData(62, "g8")]
    [InlineData(63, "h8")]
    public void ConvertPosition(byte position, string expected)
    {
        PgnSplitter.ConvertPosition(position).Should().Be(expected);
    }
}